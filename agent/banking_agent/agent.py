# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
banking_agent: An agent to assist with banking tasks like checking balances, viewing transactions, and transferring funds.
Generated by ADK Agent Generator
"""

from google.adk.agents.llm_agent import LlmAgent
from google.adk.agents.loop_agent import LoopAgent
from google.adk.agents.parallel_agent import ParallelAgent
from google.adk.agents.sequential_agent import SequentialAgent
from google.adk.tools.function_tool import FunctionTool
from google.genai import types
from typing import List, Dict, Any, Optional
import json
json


# Tool: A tool to interact with a mock bank account management system. It has functions to check account balances and retrieve account details for a given account number.
import json

# Mock database of bank accounts
MOCK_ACCOUNTS = {
    "1234567890": {
        "account_holder": "John Doe",
        "account_type": "Checking",
        "balance": 5000.75,
        "currency": "USD",
        "email": "john.doe@example.com"
    },
    "0987654321": {
        "account_holder": "Jane Smith",
        "account_type": "Savings",
        "balance": 15230.00,
        "currency": "USD",
        "email": "jane.smith@example.com"
    },
    "1122334455": {
        "account_holder": "Peter Jones",
        "account_type": "Checking",
        "balance": 1200.50,
        "currency": "CAD",
        "email": "peter.jones@example.com"
    }
}

def check_account_balance(account_number: str) -> str:
    """
    Checks the balance of a given bank account number.

    Args:
        account_number: The account number to check the balance for.

    Returns:
        A string containing the account balance and currency, 
        or an error message if the account is not found.
    """
    try:
        if account_number in MOCK_ACCOUNTS:
            account = MOCK_ACCOUNTS[account_number]
            return f"The balance for account {account_number} is {account['balance']:.2f} {account['currency']}."
        else:
            return f"Error: Account number '{account_number}' not found."
    except Exception as e:
        return f"An unexpected error occurred: {str(e)}"

def get_account_details(account_number: str) -> str:
    """
    Retrieves the details for a given bank account number.

    Args:
        account_number: The account number to retrieve details for.

    Returns:
        A JSON string with the account details (holder, type, currency),
        or an error message if the account is not found.
    """
    try:
        if account_number in MOCK_ACCOUNTS:
            account = MOCK_ACCOUNTS[account_number]
            details = {
                "account_number": account_number,
                "account_holder": account["account_holder"],
                "account_type": account["account_type"],
                "currency": account["currency"]
            }
            return json.dumps(details)
        else:
            return f"Error: Account number '{account_number}' not found."
    except Exception as e:
        return f"An unexpected error occurred: {str(e)}"

# Tool: View the transaction history for a given account.
import json

def view_transaction_history(account_number: str) -> str:
    """
    View the transaction history for a given account.

    Args:
        account_number: The account number to view the transaction history for.

    Returns:
        A JSON string representing the transaction history or an error message.
    """
    transactions = {
        "1234567890": [
            {"date": "2024-07-10", "description": "Grocery Store", "amount": -75.50},
            {"date": "2024-07-09", "description": "Salary", "amount": 2500.00},
            {"date": "2024-07-08", "description": "Electric Bill", "amount": -120.00},
        ],
        "0987654321": [
            {"date": "2024-07-10", "description": "Restaurant", "amount": -45.00},
            {"date": "2024-07-09", "description": "Online Shopping", "amount": -200.00},
        ],
    }

    try:
        if account_number in transactions:
            return json.dumps(transactions[account_number])
        else:
            return json.dumps({"error": "Account not found."})
    except Exception as e:
        return json.dumps({"error": str(e)})

# Tool: Transfer funds between two accounts.
import json

def transfer_funds(from_account: str, to_account: str, amount: float) -> str:
    """
    Transfer funds between two accounts.

    Args:
        from_account: The account number to transfer funds from.
        to_account: The account number to transfer funds to.
        amount: The amount to transfer.

    Returns:
        A JSON string with a success or error message.
    """
    # In a real application, this would be a database.
    account_balances = {
        "1234567890": 5000.00,
        "0987654321": 1500.00,
    }

    try:
        if from_account not in account_balances:
            return json.dumps({"error": f"Sender account '{from_account}' not found."})
        if to_account not in account_balances:
            return json.dumps({"error": f"Recipient account '{to_account}' not found."})
        if from_account == to_account:
            return json.dumps({"error": "Sender and recipient accounts cannot be the same."})
        if not isinstance(amount, (int, float)) or amount <= 0:
            return json.dumps({"error": "Transfer amount must be a positive number."})
        if account_balances[from_account] < amount:
            return json.dumps({"error": "Insufficient funds."})

        # Perform the transfer
        account_balances[from_account] -= amount
        account_balances[to_account] += amount

        return json.dumps({
            "success": f"Successfully transferred ${amount:.2f} from {from_account} to {to_account}.",
            "new_balances": {
                from_account: f"${account_balances[from_account]:.2f}",
                to_account: f"${account_balances[to_account]:.2f}",
            }
        })
    except Exception as e:
        return json.dumps({"error": str(e)})

# Tool: A tool to search a customer support knowledge base or FAQ. It has a function to search for answers to common customer questions.
def search_knowledge_base(query: str) -> str:
    """
    Searches the customer support knowledge base for an answer to a given query.

    Args:
        query: The customer's question or search term.

    Returns:
        The most relevant answer from the knowledge base, or a message if no answer is found.
    """
    try:
        # Simulate a database of frequently asked questions
        knowledge_base = {
            "password": "To reset your password, go to the login page and click 'Forgot Password'.",
            "billing": "You can view your billing history and manage your subscription in the 'Billing' section of your account.",
            "track": "To track your order, go to the 'Orders' page in your account and click 'Track Order'.",
            "return": "Our return policy allows returns within 30 days of purchase. Please visit the returns page for more details.",
            "contact": "You can contact support by emailing support@example.com or calling 1-800-555-1234."
        }

        # Simple keyword search
        query_lower = query.lower()
        for keyword, answer in knowledge_base.items():
            if keyword in query_lower:
                return answer

        return "I'm sorry, I couldn't find an answer to your question in the knowledge base. Please try rephrasing your search."

    except Exception as e:
        return f"An error occurred while searching the knowledge base: {str(e)}"


# To assist users with their banking needs, including checking balances, reviewing transactions, and initiating money transfers, using the account_api, transaction_api, and customer_support_db tools
BankingAgent = LlmAgent(
    name="BankingAgent",
    model="gemini-2.0-flash-lite-001",
    description="""
    To assist users with their banking needs, including checking balances, reviewing transactions, and initiating money transfers, using the account_api, transaction_api, and customer_support_db tools
    """,
    instruction="""
    ### Role Definition

You are **BankingAgent**, a secure, professional, and helpful virtual banking assistant. Your primary purpose is to assist authenticated users with their everyday banking needs in a safe and efficient manner. Your core principles are **Security, Accuracy, and Clarity**. You must prioritize the user's data security above all else.

### Capabilities

You are authorized to perform the following actions:
1.  **Check Account Balances**: Retrieve the current balance for a user's checking or savings accounts.
2.  **Review Transaction History**: Fetch a list of recent transactions for a specified account.
3.  **Initiate Money Transfers**: Securely process transfers of funds between a user's own accounts or to an external recipient.
4.  **Answer General Questions**: Provide information on banking policies, fees, services, and other frequently asked questions.

### Response Guidelines

1.  **Tone**: Always maintain a professional, courteous, and helpful tone. Avoid slang, emojis, or overly casual language.
2.  **Security First**:
    *   **NEVER** display full account numbers or any other Personally Identifiable Information (PII). Always use masking (e.g., "your Checking account ending in ...1234").
    *   **NEVER** ask the user for their password, PIN, or full account numbers. Assume they are already authenticated.
    *   For any action that moves money (i.e., transfers), you **MUST** explicitly state the full transaction details (amount, source account, destination) and ask the user for a final confirmation (e.g., "Please confirm" or "Is this correct?") before using the tool.
3.  **Clarity and Disambiguation**:
    *   If a user's request is ambiguous (e.g., "check my account"), you must ask for clarification.
        *   *Example*: "I can help with that. Are you referring to your checking or savings account?"
    *   If required parameters for a tool are missing (e.g., transfer amount), ask the user for the necessary information one step at a time.
4.  **Proactive Assistance**: When a task is complete, offer a logical next step.
    *   *Example*: After providing an account balance, you can ask, "Would you like to see recent transactions for this account?"

### Tool Usage

You have access to the following tools. Use them **only** when necessary and with the correct parameters.

**1. `account_api(account_type: str)`**
*   **Purpose**: To retrieve the balance of a specific account.
*   **When to Use**: When the user asks for their "balance," "how much money I have," or a similar query.
*   **Parameters**:
    *   `account_type`: Must be either `'checking'` or `'savings'`.
*   **Usage Flow**:
    1.  User asks for their balance.
    2.  If they don't specify an account, ask for clarification.
    3.  Call the tool with the correct `account_type`.
    4.  Present the balance to the user using masked account details (e.g., "The balance for your checking account ...1234 is $5,432.10.").

**2. `transaction_api(action: str, account_type: str, amount: float = None, recipient: str = None, start_date: str = None, end_date: str = None)`**
*   **Purpose**: To fetch transaction history or initiate a money transfer.
*   **When to Use**:
    *   For history: When the user asks to see "transactions," "history," or "recent activity." Set `action='history'`.
    *   For transfers: When the user asks to "send money," "transfer funds," or "move money." Set `action='transfer'`.
*   **Usage Flow (History)**:
    1.  User asks for transactions. Clarify the account (`checking` or `savings`) if needed.
    2.  Call the tool with `action='history'` and the specified `account_type`.
    3.  Format the response as a clear, easy-to-read list.
*   **Usage Flow (Transfer)**:
    1.  User requests to send money.
    2.  Gather all required information: source `account_type`, `amount`, and `recipient` (which could be another account type like 'savings' or an external contact).
    3.  **Crucially**, present a summary of the transfer to the user and ask for explicit confirmation.
    4.  **Only after confirmation**, call the tool with `action='transfer'` and all required parameters.
    5.  Inform the user of the success and provide the transaction reference number.

**3. `customer_support_db(query: str)`**
*   **Purpose**: To find answers to general, non-personal banking questions.
*   **When to Use**: When the user asks about topics like bank fees, branch hours, wire transfer policies, how to order checks, etc. This tool should **not** be used for queries requiring personal account data.
*   **Usage Flow**:
    1.  User asks a general question.
    2.  Formulate a concise search `query` based on their question.
    3.  Call the tool.
    4.  Present the information retrieved from the database in a helpful way.

### Error Handling

*   **Tool Failure**: If any tool returns a system error, do not expose technical details to the user. Instead, apologize and state that you are experiencing technical difficulties.
    *   *Example*: "I apologize, but I'm unable to access that information at the moment due to a system issue. Please try again in a few minutes."
*   **Invalid User Input**: If the user provides invalid information (e.g., asks for a "credit" account when they only have "checking" and "savings"), gently correct them and state the available options.
    *   *Example*: "I couldn't find a 'credit' account. Your available accounts are checking and savings. Which one would you like to use?"
*   **Forbidden Requests**: If a user asks for sensitive information you are designed not to provide (e.g., "What is my full account number?"), politely decline and explain the security reason.
    *   *Example*: "For your security, I cannot display your full account number. I can provide the last four digits if that would be helpful."

### Output Format Example (Transaction History)

Here are the 5 most recent transactions for your Checking account (...1234):
*   **Oct 26, 2023**: - $55.00 at "City Grocers"
*   **Oct 25, 2023**: - $12.50 at "The Coffee Bean"
*   **Oct 24, 2023**: + $1,500.00 from "Company ABC Direct Deposit"
*   **Oct 23, 2023**: - $250.00 Transfer to Savings (...5678)
*   **Oct 22, 2023**: - $78.95 at "Gas Station"
    """,
    tools=[FunctionTool(account_api), FunctionTool(view_transaction_history), FunctionTool(transfer_funds), FunctionTool(customer_support_db)],
    generate_content_config=types.GenerateContentConfig(temperature=0.3)
)


# Main agent (entry point)
root_agent = BankingAgent
