{
  "project_name": "banking_agent",
  "description": "An agent to assist with banking tasks like checking balances, viewing transactions, and transferring funds.",
  "version": "1.0.0",
  "main_agent": "BankingAgent",
  "agents": {
    "BankingAgent": {
      "name": "BankingAgent",
      "type": "llm_agent",
      "description": "To assist users with their banking needs, including checking balances, reviewing transactions, and initiating money transfers, using the account_api, transaction_api, and customer_support_db tools",
      "tools": [
        "account_api",
        "view_transaction_history",
        "transfer_funds",
        "customer_support_db"
      ],
      "sub_agents": [],
      "config": {
        "temperature": 0.3
      },
      "model": "gemini-2.0-flash-lite-001",
      "instruction": "### Role Definition\n\nYou are **BankingAgent**, a secure, professional, and helpful virtual banking assistant. Your primary purpose is to assist authenticated users with their everyday banking needs in a safe and efficient manner. Your core principles are **Security, Accuracy, and Clarity**. You must prioritize the user's data security above all else.\n\n### Capabilities\n\nYou are authorized to perform the following actions:\n1.  **Check Account Balances**: Retrieve the current balance for a user's checking or savings accounts.\n2.  **Review Transaction History**: Fetch a list of recent transactions for a specified account.\n3.  **Initiate Money Transfers**: Securely process transfers of funds between a user's own accounts or to an external recipient.\n4.  **Answer General Questions**: Provide information on banking policies, fees, services, and other frequently asked questions.\n\n### Response Guidelines\n\n1.  **Tone**: Always maintain a professional, courteous, and helpful tone. Avoid slang, emojis, or overly casual language.\n2.  **Security First**:\n    *   **NEVER** display full account numbers or any other Personally Identifiable Information (PII). Always use masking (e.g., \"your Checking account ending in ...1234\").\n    *   **NEVER** ask the user for their password, PIN, or full account numbers. Assume they are already authenticated.\n    *   For any action that moves money (i.e., transfers), you **MUST** explicitly state the full transaction details (amount, source account, destination) and ask the user for a final confirmation (e.g., \"Please confirm\" or \"Is this correct?\") before using the tool.\n3.  **Clarity and Disambiguation**:\n    *   If a user's request is ambiguous (e.g., \"check my account\"), you must ask for clarification.\n        *   *Example*: \"I can help with that. Are you referring to your checking or savings account?\"\n    *   If required parameters for a tool are missing (e.g., transfer amount), ask the user for the necessary information one step at a time.\n4.  **Proactive Assistance**: When a task is complete, offer a logical next step.\n    *   *Example*: After providing an account balance, you can ask, \"Would you like to see recent transactions for this account?\"\n\n### Tool Usage\n\nYou have access to the following tools. Use them **only** when necessary and with the correct parameters.\n\n**1. `account_api(account_type: str)`**\n*   **Purpose**: To retrieve the balance of a specific account.\n*   **When to Use**: When the user asks for their \"balance,\" \"how much money I have,\" or a similar query.\n*   **Parameters**:\n    *   `account_type`: Must be either `'checking'` or `'savings'`.\n*   **Usage Flow**:\n    1.  User asks for their balance.\n    2.  If they don't specify an account, ask for clarification.\n    3.  Call the tool with the correct `account_type`.\n    4.  Present the balance to the user using masked account details (e.g., \"The balance for your checking account ...1234 is $5,432.10.\").\n\n**2. `transaction_api(action: str, account_type: str, amount: float = None, recipient: str = None, start_date: str = None, end_date: str = None)`**\n*   **Purpose**: To fetch transaction history or initiate a money transfer.\n*   **When to Use**:\n    *   For history: When the user asks to see \"transactions,\" \"history,\" or \"recent activity.\" Set `action='history'`.\n    *   For transfers: When the user asks to \"send money,\" \"transfer funds,\" or \"move money.\" Set `action='transfer'`.\n*   **Usage Flow (History)**:\n    1.  User asks for transactions. Clarify the account (`checking` or `savings`) if needed.\n    2.  Call the tool with `action='history'` and the specified `account_type`.\n    3.  Format the response as a clear, easy-to-read list.\n*   **Usage Flow (Transfer)**:\n    1.  User requests to send money.\n    2.  Gather all required information: source `account_type`, `amount`, and `recipient` (which could be another account type like 'savings' or an external contact).\n    3.  **Crucially**, present a summary of the transfer to the user and ask for explicit confirmation.\n    4.  **Only after confirmation**, call the tool with `action='transfer'` and all required parameters.\n    5.  Inform the user of the success and provide the transaction reference number.\n\n**3. `customer_support_db(query: str)`**\n*   **Purpose**: To find answers to general, non-personal banking questions.\n*   **When to Use**: When the user asks about topics like bank fees, branch hours, wire transfer policies, how to order checks, etc. This tool should **not** be used for queries requiring personal account data.\n*   **Usage Flow**:\n    1.  User asks a general question.\n    2.  Formulate a concise search `query` based on their question.\n    3.  Call the tool.\n    4.  Present the information retrieved from the database in a helpful way.\n\n### Error Handling\n\n*   **Tool Failure**: If any tool returns a system error, do not expose technical details to the user. Instead, apologize and state that you are experiencing technical difficulties.\n    *   *Example*: \"I apologize, but I'm unable to access that information at the moment due to a system issue. Please try again in a few minutes.\"\n*   **Invalid User Input**: If the user provides invalid information (e.g., asks for a \"credit\" account when they only have \"checking\" and \"savings\"), gently correct them and state the available options.\n    *   *Example*: \"I couldn't find a 'credit' account. Your available accounts are checking and savings. Which one would you like to use?\"\n*   **Forbidden Requests**: If a user asks for sensitive information you are designed not to provide (e.g., \"What is my full account number?\"), politely decline and explain the security reason.\n    *   *Example*: \"For your security, I cannot display your full account number. I can provide the last four digits if that would be helpful.\"\n\n### Output Format Example (Transaction History)\n\nHere are the 5 most recent transactions for your Checking account (...1234):\n*   **Oct 26, 2023**: - $55.00 at \"City Grocers\"\n*   **Oct 25, 2023**: - $12.50 at \"The Coffee Bean\"\n*   **Oct 24, 2023**: + $1,500.00 from \"Company ABC Direct Deposit\"\n*   **Oct 23, 2023**: - $250.00 Transfer to Savings (...5678)\n*   **Oct 22, 2023**: - $78.95 at \"Gas Station\""
    }
  },
  "tools": {
    "account_api": {
      "name": "account_api",
      "type": "custom_function",
      "description": "A tool to interact with a mock bank account management system. It has functions to check account balances and retrieve account details for a given account number.",
      "function_code": "\nimport json\n\n# Mock database of bank accounts\nMOCK_ACCOUNTS = {\n    \"1234567890\": {\n        \"account_holder\": \"John Doe\",\n        \"account_type\": \"Checking\",\n        \"balance\": 5000.75,\n        \"currency\": \"USD\",\n        \"email\": \"john.doe@example.com\"\n    },\n    \"0987654321\": {\n        \"account_holder\": \"Jane Smith\",\n        \"account_type\": \"Savings\",\n        \"balance\": 15230.00,\n        \"currency\": \"USD\",\n        \"email\": \"jane.smith@example.com\"\n    },\n    \"1122334455\": {\n        \"account_holder\": \"Peter Jones\",\n        \"account_type\": \"Checking\",\n        \"balance\": 1200.50,\n        \"currency\": \"CAD\",\n        \"email\": \"peter.jones@example.com\"\n    }\n}\n\ndef check_account_balance(account_number: str) -> str:\n    \"\"\"\n    Checks the balance of a given bank account number.\n\n    Args:\n        account_number: The account number to check the balance for.\n\n    Returns:\n        A string containing the account balance and currency, \n        or an error message if the account is not found.\n    \"\"\"\n    try:\n        if account_number in MOCK_ACCOUNTS:\n            account = MOCK_ACCOUNTS[account_number]\n            return f\"The balance for account {account_number} is {account['balance']:.2f} {account['currency']}.\"\n        else:\n            return f\"Error: Account number '{account_number}' not found.\"\n    except Exception as e:\n        return f\"An unexpected error occurred: {str(e)}\"\n\ndef get_account_details(account_number: str) -> str:\n    \"\"\"\n    Retrieves the details for a given bank account number.\n\n    Args:\n        account_number: The account number to retrieve details for.\n\n    Returns:\n        A JSON string with the account details (holder, type, currency),\n        or an error message if the account is not found.\n    \"\"\"\n    try:\n        if account_number in MOCK_ACCOUNTS:\n            account = MOCK_ACCOUNTS[account_number]\n            details = {\n                \"account_number\": account_number,\n                \"account_holder\": account[\"account_holder\"],\n                \"account_type\": account[\"account_type\"],\n                \"currency\": account[\"currency\"]\n            }\n            return json.dumps(details)\n        else:\n            return f\"Error: Account number '{account_number}' not found.\"\n    except Exception as e:\n        return f\"An unexpected error occurred: {str(e)}\"\n",
      "imports": [
        "json"
      ]
    },
    "view_transaction_history": {
      "name": "view_transaction_history",
      "type": "custom_function",
      "description": "View the transaction history for a given account.",
      "function_code": "\nimport json\n\ndef view_transaction_history(account_number: str) -> str:\n    \"\"\"\n    View the transaction history for a given account.\n\n    Args:\n        account_number: The account number to view the transaction history for.\n\n    Returns:\n        A JSON string representing the transaction history or an error message.\n    \"\"\"\n    transactions = {\n        \"1234567890\": [\n            {\"date\": \"2024-07-10\", \"description\": \"Grocery Store\", \"amount\": -75.50},\n            {\"date\": \"2024-07-09\", \"description\": \"Salary\", \"amount\": 2500.00},\n            {\"date\": \"2024-07-08\", \"description\": \"Electric Bill\", \"amount\": -120.00},\n        ],\n        \"0987654321\": [\n            {\"date\": \"2024-07-10\", \"description\": \"Restaurant\", \"amount\": -45.00},\n            {\"date\": \"2024-07-09\", \"description\": \"Online Shopping\", \"amount\": -200.00},\n        ],\n    }\n\n    try:\n        if account_number in transactions:\n            return json.dumps(transactions[account_number])\n        else:\n            return json.dumps({\"error\": \"Account not found.\"})\n    except Exception as e:\n        return json.dumps({\"error\": str(e)})\n",
      "imports": [
        "import json"
      ]
    },
    "transfer_funds": {
      "name": "transfer_funds",
      "type": "custom_function",
      "description": "Transfer funds between two accounts.",
      "function_code": "\nimport json\n\ndef transfer_funds(from_account: str, to_account: str, amount: float) -> str:\n    \"\"\"\n    Transfer funds between two accounts.\n\n    Args:\n        from_account: The account number to transfer funds from.\n        to_account: The account number to transfer funds to.\n        amount: The amount to transfer.\n\n    Returns:\n        A JSON string with a success or error message.\n    \"\"\"\n    # In a real application, this would be a database.\n    account_balances = {\n        \"1234567890\": 5000.00,\n        \"0987654321\": 1500.00,\n    }\n\n    try:\n        if from_account not in account_balances:\n            return json.dumps({\"error\": f\"Sender account '{from_account}' not found.\"})\n        if to_account not in account_balances:\n            return json.dumps({\"error\": f\"Recipient account '{to_account}' not found.\"})\n        if from_account == to_account:\n            return json.dumps({\"error\": \"Sender and recipient accounts cannot be the same.\"})\n        if not isinstance(amount, (int, float)) or amount <= 0:\n            return json.dumps({\"error\": \"Transfer amount must be a positive number.\"})\n        if account_balances[from_account] < amount:\n            return json.dumps({\"error\": \"Insufficient funds.\"})\n\n        # Perform the transfer\n        account_balances[from_account] -= amount\n        account_balances[to_account] += amount\n\n        return json.dumps({\n            \"success\": f\"Successfully transferred ${amount:.2f} from {from_account} to {to_account}.\",\n            \"new_balances\": {\n                from_account: f\"${account_balances[from_account]:.2f}\",\n                to_account: f\"${account_balances[to_account]:.2f}\",\n            }\n        })\n    except Exception as e:\n        return json.dumps({\"error\": str(e)})\n",
      "imports": [
        "import json"
      ]
    },
    "customer_support_db": {
      "name": "customer_support_db",
      "type": "custom_function",
      "description": "A tool to search a customer support knowledge base or FAQ. It has a function to search for answers to common customer questions.",
      "function_code": "\ndef search_knowledge_base(query: str) -> str:\n    \"\"\"\n    Searches the customer support knowledge base for an answer to a given query.\n\n    Args:\n        query: The customer's question or search term.\n\n    Returns:\n        The most relevant answer from the knowledge base, or a message if no answer is found.\n    \"\"\"\n    try:\n        # Simulate a database of frequently asked questions\n        knowledge_base = {\n            \"password\": \"To reset your password, go to the login page and click 'Forgot Password'.\",\n            \"billing\": \"You can view your billing history and manage your subscription in the 'Billing' section of your account.\",\n            \"track\": \"To track your order, go to the 'Orders' page in your account and click 'Track Order'.\",\n            \"return\": \"Our return policy allows returns within 30 days of purchase. Please visit the returns page for more details.\",\n            \"contact\": \"You can contact support by emailing support@example.com or calling 1-800-555-1234.\"\n        }\n\n        # Simple keyword search\n        query_lower = query.lower()\n        for keyword, answer in knowledge_base.items():\n            if keyword in query_lower:\n                return answer\n\n        return \"I'm sorry, I couldn't find an answer to your question in the knowledge base. Please try rephrasing your search.\"\n\n    except Exception as e:\n        return f\"An error occurred while searching the knowledge base: {str(e)}\"\n"
    }
  },
  "requirements": [],
  "environment_variables": {},
  "environment_variables_example": {}
}